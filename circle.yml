# This circle.yml is heavily inspired from the guide at
# https://circleci.com/docs/continuous-deployment-with-google-container-engine/
general:
  branches:
    only: # list of branches to build
      - master
      - production
machine:
  environment:
    GCLOUD_PROJECT: kbh-billeder
    GCLOUD_CLUSTER: kbh-billeder-staging-cluster
    GCLOUD_COMPUTE_ZONE: europe-west1-b
    GOOGLE_APPLICATION_CREDENTIALS: ${HOME}/gcloud-service-key.json
    GCLOUD: sudo /opt/google-cloud-sdk/bin/gcloud
  # Using docker 1.10, to enable the --build-arg
  # See https://discuss.circleci.com/t/docker-1-10-0-is-available-beta/2100/49
  # and https://docs.docker.com/engine/reference/commandline/build/
  pre:
    - curl -sSL https://s3.amazonaws.com/circle-downloads/install-circleci-docker.sh | bash -s -- 1.10.0
  services:
    - docker
dependencies:
  override:
    # Upgrading the gcloud command and installing kubectl
    - $GCLOUD --quiet components update
    - $GCLOUD --quiet components update kubectl
    # Decode the gcloud service account key and authenticate gcloud
    - echo $GCLOUD_SERVICE_KEY | base64 --decode > ${HOME}/gcloud-service-key.json
    - $GCLOUD auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
    # Setup gcloud configuration
    - $GCLOUD config set project $GCLOUD_PROJECT
    - $GCLOUD config set compute/zone $GCLOUD_COMPUTE_ZONE
    # Get the credentials for the cluster
    - $GCLOUD container clusters get-credentials $GCLOUD_CLUSTER
    # See https://discuss.circleci.com/t/google-container-engine-deployment-fails/11690/9
    - sudo chown -R $USER /home/ubuntu/.config
    # Change the owner of the kubenetes files to ubuntu
    - sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
    # Write specific environment variables to an .env file
    - |
      cat << EOF > .env
      CIP_USERNAME="${CIP_USERNAME}"
      CIP_PASSWORD="${CIP_PASSWORD}"
      KEYSTONE_ADMIN_EMAIL="${KEYSTONE_ADMIN_EMAIL}"
      KEYSTONE_ADMIN_PASSWORD="${KEYSTONE_ADMIN_PASSWORD}"
      COOKIE_SECRET="${COOKIE_SECRET}"
      CLOUDINARY_URL="${CLOUDINARY_URL}"
      GOOGLE_UNRESTRICTED_API_KEY="${GOOGLE_UNRESTRICTED_API_KEY}"
      MAILGUN_API_KEY="${MAILGUN_API_KEY}"
      DISABLE_NOTIFIER="true"
      EOF
    # Append either NODE_ENV="production" or NODE_ENV="beta" to .env
    # based on the CIRCLE_BRANCH
    - |
      if [ "$CIRCLE_BRANCH" = "master" ]; then
        echo "NODE_ENV=beta" >> .env
        echo "AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET_BETA}" >> .env
      elif [ "$CIRCLE_BRANCH" = "production" ]; then
        echo "NODE_ENV=production" >> .env
        echo "AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET_PRODUCTION}" >> .env
      else
        echo "Unexpected branch ($CIRCLE_BRANCH), could not determine NODE_ENV" && exit 1;
      fi
    # Base 64 decode the GOOGLE_KEY into a .json file
    - echo $GOOGLE_KEY | base64 --decode > ./google-key.json
    # Build a container and tag it as latest
    - sudo docker build -t eu.gcr.io/${GCLOUD_PROJECT}/frontend:$CIRCLE_BRANCH-$CIRCLE_SHA1 .
    # Using a separate tag command until Docker 1.10 is available on CircleCI, then we can use two tags in the build command above
    - sudo docker tag eu.gcr.io/${GCLOUD_PROJECT}/frontend:$CIRCLE_BRANCH-$CIRCLE_SHA1 eu.gcr.io/${GCLOUD_PROJECT}/frontend:$CIRCLE_BRANCH-latest
  cache_directories:
    - /opt/google-cloud-sdk/
test:
  override:
    - sudo docker run eu.gcr.io/${GCLOUD_PROJECT}/frontend:$CIRCLE_BRANCH-latest npm test
deployment:
  staging:
    branch: master
    commands:
      - ./deployment/beta/patch.sh
  production:
    branch: production
    commands:
      - ./deployment/production/patch.sh
